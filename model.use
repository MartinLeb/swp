model Auction

--------------------------------------------
--enums
--------------------------------------------

enum CommandWord {
	login, save, bid, joinAuction, createAuction
}

--------------------------------------------
--classes
--------------------------------------------

class Agent
attributes
	name: String
	id: Integer
	description: String
operations
	sendMessage(m:Message, receiver:Agent) : Boolean
end

class AuctioneerAgent < Agent
operations
	generateUserID(): Integer
	generateAuctionID():Integer
	generateAuctionAgent(auctionID: Integer)
end

class BidAgent < Agent

end

class AuctionAgent < Agent
attributes
	startTime: Integer
	endTime: Integer
end

class SearchAgent < Agent

end

class AuctionDescription
attributes
	productDescription: String
end

class AuctionType
end

class EnglishAuction < AuctionType
attributes 
	minBid: Real
end

class DutchAuction < AuctionType
end

class Bid
attributes
	user: User
	price: Real
	startTime: Integer
end

class BidHistory

end

class User
attributes
	loginName: String
	password: String
	eMail: String
	id: Integer	
end

class Message
attributes
	command : CommandWord
end

class Category
attributes
	name: String
	id: Integer
end

class Object
attributes
	name:String
	description: String
end


class Strategy
attributes
	bidPrice: Real
end

class BidByTime < Strategy
attributes
	time: Integer
operations
	bid(bidPrice: Real)
end

class PeriodicBid < Strategy
attributes
	startTime:Integer
	interval: Integer
	maxBid: Real
operations
	bid(bidPrice: Real)
end

--------------------------------------------
--compositions
--------------------------------------------

composition Has between
	AuctionAgent[1] 
	Object[1]	
end

composition saves between
	AuctionAgent[1]
	BidHistory[1]
end

composition BidHistoryContainsBids between
	BidHistory[1]
	Bid[*]
end
	
--------------------------------------------
--aggregations
--------------------------------------------

aggregation ObjectHasCategory between
	Object[1]
	Category[0..*]
end

aggregation Follows between
	BidAgent[0..*]
	Strategy[1]
end

aggregation hasOne between
	AuctionAgent[1..*]
	AuctionType[1]
end

aggregation resultList between
	SearchAgent[1]
	AuctionDescription[*]
end

aggregation auctionList between
	AuctioneerAgent[1]
	AuctionDescription[*]
end

--------------------------------------------
--associations
--------------------------------------------

association AgentUsesMessages between
	Agent[1]
	Message[*]
end

association CategoryHierarchy between
	Category[0..*] role Category
	Category[1] role SubCategory
end

association administrate between
	AuctioneerAgent[1]
	AuctionAgent[0..*]
end

association registered between
	AuctioneerAgent[0..*]
	User[0..*]
end

association search between
	User[1]
	SearchAgent[1..*] 
end

association searchQuery between
	SearchAgent[1..*] role sendsQuery
	AuctioneerAgent[1] role repliesResultList
end

association createBidAgent between
	BidAgent[1]
	User[1]
end

association knows between
	BidAgent[1]
	AuctionAgent[1]
end

association submit between
	BidAgent[1]
	Bid[0..*]
end
----------------------------------------------
--Constraints
----------------------------------------------
constraints
context AuctioneerAgent
	inv: name.isDefined and id.isDefined
context AuctionAgent
	inv: name.isDefined and id.isDefined and startTime < endTime
context Object
	inv: name.isDefined and description.isDefined